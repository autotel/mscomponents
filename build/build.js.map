{"version":3,"sources":["../../node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index.js","src/slider.js","src/syncman.js"],"names":[],"mappings":"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","file":"build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// var syncman={};\r\nvar syncman=require('./syncman.js').enable();\r\nvar Slider=require('./slider.js').enable(syncman,$);\r\nvar MsComponents={\r\n  Slider:Slider\r\n};\r\nwindow.MsComponents=MsComponents;\r\nconsole.log(MsComponents);","/*\r\nThis script create DOM sliders that can be used in web browser to control stuff. They can be synced through sockets and others by using callbacks.\r\n    Copyright (C) 2016 Joaquín Aldunate\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nvar syncman;\r\nvar $;\r\nexports.enable=function(sman,jq){\r\n  syncman=sman;\r\n  $=jq;\r\n  return Slider;\r\n};\r\nfunction Slider(parent,options){\r\n  //my reference number for data binding. With this number the socket binder knows who is the reciever of the data, and also with what name to send it\r\n  //pendant: this can potentially create a problem, because two objects can be created simultaneously at different ends at the same time.\r\n  //maybe instead of the simple push, there could be a callback, adn the object waits to receive it's socket id once its creation was propagated throughout all the network, or maybe there is an array for senting and other different for receiving... first option seems more sensible\r\n  this.data={value:0};\r\n\r\n  this._bindN=syncman.bindList.push(this)-1;\r\n  this.$jq=$('<div class=\"slider-container\" style=\"position:relative\"></div>');\r\n  this.$faderjq=$('<div class=\"slider-inner\" style=\"pointer-events:none; position:absolute\"></div>');\r\n  this.label=options.label||\"\";\r\n  this.labeljq=$('<p class=\"sliderlabel\"></p>');\r\n  this.$jq.append(this.$faderjq);\r\n  this.$jq.append(this.labeljq);\r\n  if(options.css)\r\n    this.$jq.css(options.css);\r\n  this.css=function(css){\r\n    this.$jq.css(css);\r\n    return this;\r\n  }\r\n  this.onChangeCallback=function(){};\r\n  //pendant: this should be part of a base prototype, not repeated in each type\r\n  if(typeof (parent.append||false)==\"function\"){\r\n    parent.append(this.$jq);\r\n  }else if(typeof (parent.$jq.append||false)==\"function\"){\r\n    parent.$jq.append(this.$jq);\r\n  }else{\r\n    console.log(\"a slider couldn't find dom element to attach himself\");\r\n  }\r\n  var me=this;\r\n  this.onChange=function(callback){\r\n    me.onChangeCallback=function(){callback(me.data)};\r\n    return this;\r\n  }\r\n\r\n  this.setData=function(to,emit){\r\n    if(emit===true){\r\n      //pendant: in sequencers we use parent.id, and here we use _bindN. Towards a controller API and a more sensical code, I think both should use the bind element array. read note in first line of this file.\r\n      //pendant: parent in seq is what me is here. this is pretty confusing var name decision\r\n      syncman.emit(\"slid:\"+me._bindN+\"\",\"sV\",to);\r\n    }\r\n    this.data.value=to;\r\n    this.onChangeCallback();\r\n    this.updateDom();\r\n  }\r\n  this.addClass=function(to){\r\n    this.$jq.addClass(to);\r\n  }\r\n  this.vertical=true;\r\n  this.addClass(\"vertical\");\r\n  this.$jq.on(\"mousedown tap touchstart\",function(event){\r\n    event.preventDefault();\r\n    if(me.vertical){\r\n      me.setData(1-event.offsetY/me.$jq.height(),true);//,true\r\n    }else{\r\n      me.setData(event.offsetX/me.$jq.width(),true);//,true\r\n    }\r\n  });\r\n\r\n  this.$jq.on(\"mousemove touchenter mouseleave mouseup\",function(event){\r\n    if(mouse.buttonDown){\r\n      event.preventDefault();\r\n      var emitThis=event.type==\"mouseleave\"||event.type==\"mouseup\"\r\n      if(me.vertical){\r\n        //the strange second paramenter in setdata was true, but it could clog the socket\r\n        me.setData(1-event.offsetY/me.$jq.height(),emitThis);//,true\r\n      }else{\r\n        me.setData(event.offsetX/me.$jq.width(),emitThis);//,true\r\n      }\r\n    }else{\r\n    }\r\n  });\r\n  this.eval=function(){\r\n    var jq=this.$jq;\r\n    jq.addClass(\"turn\");\r\n    window.setTimeout(function(){\r\n      jq.removeClass(\"turn\");\r\n    },200);\r\n    return this.data.value;\r\n  }\r\n  this.updateDom=function(){\r\n    if(this.vertical){\r\n      this.$faderjq.css({bottom:0,width:\"100%\",height:this.data.value*this.$jq.height()});\r\n    }else{\r\n      this.labeljq.html(this.label);\r\n      this.$faderjq.css({bottom:0,width:this.data.value*this.$jq.width(),height:\"100%\"});\r\n    }\r\n  }\r\n  this.setData(0);\r\n}","/*\r\nThis script contains a template for data-binding management if you want to do so. Otherwise, it will just placehold var names so there are no undefined vars.\r\n    Copyright (C) 2016 Joaquín Aldunate\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nexports.enable=function(){\r\n  return new Syncman();\r\n};\r\n\r\nfunction Syncman(){\r\n  //list of all the items that use data binding\r\n  this.bindList=[];\r\n  //how are you emitting changes? it depends on the server you use.\r\n  this.emit=function(){}\r\n}\r\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}