{"version":3,"sources":["../../node_modules/browserify/node_modules/browser-pack/_prelude.js","../../node_modules/browserify/node_modules/events/events.js","node_modules/onhandlers/on.js","node_modules/web-audio-scheduler/index.js","node_modules/web-audio-scheduler/lib/WebAudioScheduler.js","node_modules/web-audio-scheduler/lib/defaultContext.js","node_modules/web-audio-scheduler/lib/index.js","node_modules/web-audio-scheduler/lib/utils/defaults.js","src/Button.js","src/Clock.js","src/Sequencer.js","src/Slider.js","src/componentBase.js","src/index.js","src/mouse.js","src/syncman.js"],"names":[],"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","file":"build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","/*\r\nyou make the onHandlers.call(this) in the object that needs to have handlers.\r\nthen you can create a function callback for that object using object.on(\"handlerName.optionalName\",callbackFunction(){});\r\nthe object can run the handle callbacks by using this.handle(\"handlerName\",parametersToFeed);\r\n*/\r\nmodule.exports=function() {\r\n  var eventVerbose=false;\r\n  if (!this.ons) {\r\n    this.ons = [];\r\n  }\r\n  this.on = function(name, callback) {\r\n    var name = name.split(\".\");\r\n    if (typeof callback === 'function') {\r\n      if (name.length == 0) {\r\n        throw (\"sorry, you gave an invalid event name\");\r\n      } else if (name.length > 0) {\r\n        if (!this.ons[name[0]]) this.ons[name[0]] = [];\r\n        this.ons[name[0]].push([false, callback]);\r\n      }\r\n      // console.log(this.ons);\r\n    } else {\r\n      throw (\"error at mouse.on, provided callback that is not a function\");\r\n    }\r\n  }\r\n  this.off = function(name) {\r\n    var name = name.split(\".\");\r\n    if (name.length > 1) {\r\n      if (!this.ons[name[0]]) this.ons[name[0]] = [];\r\n      // console.log(\"prev\",this.ons[name[0]]);\r\n      this.ons[name[0]].splice(this.ons[name[0]].indexOf(name[1]), 1);\r\n      // console.log(\"then\",this.ons[name[0]]);\r\n    } else {\r\n      throw (\"sorry, you gave an invalid event name\" + name);\r\n    }\r\n  }\r\n  this.handle = function(fname, params) {\r\n    if(eventVerbose) console.log(\"Event \"+fname+\":\",{caller:this,params:params});\r\n    if (this.ons[fname]) {\r\n      for (var n in this.ons[fname]) {\r\n        // console.log(this.ons[fname][n][1]);\r\n        this.ons[fname][n][1](params);\r\n      }\r\n    }\r\n  }\r\n};","module.exports = require(\"./lib\");\n","\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar events = require(\"events\");\nvar defaults = require(\"./utils/defaults\");\nvar defaultContext = require(\"./defaultContext\");\n\nvar WebAudioScheduler = function (_events$EventEmitter) {\n  _inherits(WebAudioScheduler, _events$EventEmitter);\n\n  function WebAudioScheduler(opts) {\n    _classCallCheck(this, WebAudioScheduler);\n\n    opts = opts || /* istanbul ignore next */{};\n\n    var _this = _possibleConstructorReturn(this, (WebAudioScheduler.__proto__ || Object.getPrototypeOf(WebAudioScheduler)).call(this));\n\n    _this.context = defaults(opts.context, defaultContext);\n    _this.interval = defaults(opts.interval, 0.025);\n    _this.aheadTime = defaults(opts.aheadTime, 0.1);\n    _this.timerAPI = defaults(opts.timerAPI, global);\n    _this.playbackTime = _this.currentTime;\n\n    _this._timerId = 0;\n    _this._schedId = 0;\n    _this._scheds = [];\n    return _this;\n  }\n\n  _createClass(WebAudioScheduler, [{\n    key: \"start\",\n    value: function start(callback, args) {\n      var _this2 = this;\n\n      var loop = function loop() {\n        var t0 = _this2.context.currentTime;\n        var t1 = t0 + _this2.aheadTime;\n\n        _this2._process(t0, t1);\n      };\n\n      if (this._timerId === 0) {\n        this._timerId = this.timerAPI.setInterval(loop, this.interval * 1000);\n\n        this.emit(\"start\");\n\n        if (callback) {\n          this.insert(this.context.currentTime, callback, args);\n          loop();\n        }\n      } else if (callback) {\n        this.insert(this.context.currentTime, callback, args);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var reset = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n      if (this._timerId !== 0) {\n        this.timerAPI.clearInterval(this._timerId);\n        this._timerId = 0;\n\n        this.emit(\"stop\");\n      }\n\n      if (reset) {\n        this._scheds.splice(0);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(time, callback, args) {\n      var id = ++this._schedId;\n      var event = { id: id, time: time, callback: callback, args: args };\n      var scheds = this._scheds;\n\n      if (scheds.length === 0 || scheds[scheds.length - 1].time <= time) {\n        scheds.push(event);\n      } else {\n        for (var i = 0, imax = scheds.length; i < imax; i++) {\n          if (time < scheds[i].time) {\n            scheds.splice(i, 0, event);\n            break;\n          }\n        }\n      }\n\n      return id;\n    }\n  }, {\n    key: \"nextTick\",\n    value: function nextTick(time, callback, args) {\n      if (typeof time === \"function\") {\n        args = callback;\n        callback = time;\n        time = this.playbackTime;\n      }\n\n      return this.insert(time + this.aheadTime, callback, args);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(schedId) {\n      var scheds = this._scheds;\n\n      if (typeof schedId === \"number\") {\n        for (var i = 0, imax = scheds.length; i < imax; i++) {\n          if (schedId === scheds[i].id) {\n            scheds.splice(i, 1);\n            break;\n          }\n        }\n      }\n\n      return schedId;\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      this._scheds.splice(0);\n    }\n  }, {\n    key: \"_process\",\n    value: function _process(t0, t1) {\n      var scheds = this._scheds;\n      var playbackTime = t0;\n\n      this.playbackTime = playbackTime;\n      this.emit(\"process\", { playbackTime: playbackTime });\n\n      while (scheds.length && scheds[0].time < t1) {\n        var event = scheds.shift();\n        var _playbackTime = event.time;\n        var args = event.args;\n\n        this.playbackTime = _playbackTime;\n\n        event.callback({ playbackTime: _playbackTime, args: args });\n      }\n\n      this.playbackTime = playbackTime;\n      this.emit(\"processed\", { playbackTime: playbackTime });\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._timerId !== 0 ? \"running\" : \"suspended\";\n    }\n  }, {\n    key: \"currentTime\",\n    get: function get() {\n      return this.context.currentTime;\n    }\n  }, {\n    key: \"events\",\n    get: function get() {\n      return this._scheds.slice();\n    }\n  }]);\n\n  return WebAudioScheduler;\n}(events.EventEmitter);\n\nmodule.exports = WebAudioScheduler;","\"use strict\";\n\nmodule.exports = {\n  get currentTime() {\n    return Date.now() / 1000;\n  }\n};","\"use strict\";\n\nmodule.exports = require(\"./WebAudioScheduler\");","\"use strict\";\n\nfunction defaults(value, defaultValue) {\n  return value !== undefined ? value : defaultValue;\n}\n\nmodule.exports = defaults;","var componentBase=require('./componentBase');\r\nvar syncman,mouse;\r\nexports.enable=function(globals){\r\n  syncman=globals.syncman;\r\n  mouse=globals.mouse;\r\n  componentBase=componentBase.get({syncman:syncman,mouse:mouse});\r\n  return Button;\r\n}\r\nfunction Button(parent,options){\r\n  this.name=\"button\";\r\n  componentBase.call(this,parent,options);\r\n  //my reference number for data binding. With this number the socket binder knows who is the reciever of the data, and also with what name to send it\r\n  //pendant: this can potentially create a problem, because two objects can be created simultaneously at different ends at the same time.\r\n  //maybe instead of the simple push, there could be a callback, adn the object waits to receive it's socket id once its creation was propagated throughout all the network, or maybe there is an array for senting and other different for receiving... first option seems more sensible\r\n  this.data={value:0};\r\n  this.states=false;\r\n  this._bindN=syncman.bindList.push(this)-1;\r\n  //this.$jq=$('<div class=\"ms-button\"></div>');\r\n  this.label=options.label||\"☻\";\r\n  this.$jq.append(this.$faderjq);\r\n  this.$jq.html(this.label);\r\n  // if(options.css)\r\n  //   this.$jq.css(options.css);\r\n  // this.css=function(css){\r\n  //   this.$jq.css(options.css);\r\n  //   return this;\r\n  // }\r\n  //if a switch variable is passed, this button will switch on each click among the stated states\r\n  if(options.hasOwnProperty(\"switch\")){\r\n    this.states=[];\r\n    this.data.currentState=0;\r\n    this.states=options.switch;\r\n    this.switchState(0);\r\n  }\r\n  this.onClickCallback=function(){};\r\n  this.onReleaseCallback=function(){};\r\n  //pendant: this should be part of a base prototype, not repeated in each type\r\n  // if(typeof (parent.append||false)==\"function\"){\r\n  //   parent.append(this.$jq);\r\n  // }else if(typeof (parent.$jq.append||false)==\"function\"){\r\n  //   parent.$jq.append(this.$jq);\r\n  // }else{\r\n  //   console.log(\"a slider couldn't find dom element to attach himself\");\r\n  // }\r\n  var me=this;\r\n  // this.onChange=function(callback){\r\n  //   me.onClickCallback=function(){callback(me.data)};\r\n  //   return this;\r\n  // }\r\n\r\n  this.$jq.on(\"mousedown tap touchstart\",function(event){\r\n    me.onClickCallback(me.data);\r\n    event.preventDefault();\r\n    me.switchState();\r\n    me.addClass(\"active\");\r\n  });\r\n  this.$jq.on(\"mouseup mouseleave\",function(event){\r\n    me.onReleaseCallback(me.data);\r\n    event.preventDefault();\r\n    me.removeClass(\"active\");\r\n  });\r\n}\r\n\r\n\r\nButton.prototype.onClick=function(callback){\r\n  this.onClickCallback=callback;\r\n  return this;\r\n}\r\nButton.prototype.onRelease=function(callback){\r\n  this.onReleaseCallback=callback;\r\n  return this;\r\n}\r\nButton.prototype.switchState=function(to){\r\n  if(this.states){\r\n    //change state number to next\r\n    if(to){\r\n      this.data.currentState=to%this.states.length;\r\n    }else{\r\n      this.data.currentState=(this.data.currentState+1)%this.states.length;\r\n    }\r\n    //apply all the properties that the state carry. This makes the button super hackable\r\n    for(a in this.states[this.data.currentState]){\r\n      this[a]=this.states[this.data.currentState][a];\r\n      // console.log(\"[\"+a+\"]\",this[a]);\r\n    }\r\n  }\r\n  this.updateDom();\r\n}\r\n","\r\nvar syncman,mouse,audioContext;\r\nvar OH=require(\"onhandlers\");\r\nvar Timer=require(\"web-audio-scheduler\");\r\nexports.enable=function(globals){\r\n  console.log(\"timer\",Timer);\r\n  syncman=globals.syncman;\r\n  mouse=globals.mouse;\r\n  audioContext=globals.audioContext;\r\n  return Clock;\r\n};\r\nfunction Clock(parent,options){\r\n\r\n  var defaults={\r\n    interval:0.1\r\n  }\r\n  this.currentStep=0;\r\n  this.name=\"clock\";\r\n  OH.call(this);\r\n  var thisClock=this;\r\n  this.data={value:0};\r\n  this.states=false;\r\n  this._bindN=syncman.bindList.push(this)-1;\r\n  this.$jq=$('<div class=\"ms-clock ms-button\"></div>');\r\n  this.label=options.label||'∆';\r\n  this.$jq.append(this.$faderjq);\r\n  this.$jq.html(this.label);\r\n  if(options.css)\r\n    this.$jq.css(options.css);\r\n  this.css=function(css){\r\n    this.$jq.css(options.css);\r\n    return this;\r\n  }\r\n  //this should go in componentBase. It applies options or defaults.\r\n  if(!options)\r\n  options={};\r\n  for(var a in defaults){\r\n    if(!options[a])\r\n    options[a]=defaults[a];\r\n  }\r\n  //pendant: this should be part of a base prototype, not repeated in each type\r\n  if(typeof (parent.append||false)==\"function\"){\r\n    parent.append(this.$jq);\r\n  }else if(typeof (parent.$jq.append||false)==\"function\"){\r\n    parent.$jq.append(this.$jq);\r\n  }else{\r\n    console.log(\"a clock couldn't find dom element to attach himself\");\r\n  }\r\n  var me=this;\r\n\r\n  this.timer = new Timer({ context: audioContext });\r\n  var intervalHandle;\r\n  //the current timer technology doesn't make interval but rather schedules ahead, thus these vars:\r\n  var lastTimerScheduled=0;\r\n  var lastTimerExecuted=0;\r\n  var createFurtherTimerSchedules=function(howMany){\r\n    var addUpTo=lastTimerScheduled+howMany;\r\n    for(lastTimerScheduled; lastTimerScheduled<addUpTo; lastTimerScheduled++)\r\n    me.timer.insert(options.interval*lastTimerScheduled, me.tick,{tickn:lastTimerScheduled});\r\n  }\r\n  this.tick=function(a){\r\n    lastTimerExecuted++;\r\n    createFurtherTimerSchedules(4);\r\n    thisClock.handle(\"tick\");\r\n    thisClock.addClass(\"tick\");\r\n    // console.log(\"tick\");\r\n    setTimeout(function(){thisClock.removeClass(\"tick\");},20);\r\n    this.currentStep++;\r\n  }\r\n  this.start=function(){\r\n    // console.log(options.interval);\r\n    createFurtherTimerSchedules(4);\r\n    this.timer.start();\r\n    //intervalHandle=window.setInterval(this.tick,options.interval|1);\r\n  }\r\n  this.stop=function(){\r\n    this.timer.stop();\r\n    ///this.timer.remove(intervalHandle);\r\n    //window.clearInterval(intervalHandle);\r\n  }\r\n  if(options.start)\r\n  this.start();\r\n\r\n}\r\n\r\nClock.prototype.updateDom=function(){\r\n  this.$jq.html(this.label);\r\n}\r\n\r\n\r\n\r\n//aliasing of these two handy function\r\nClock.prototype.addClass=function(to){\r\n  this.$jq.addClass(to);\r\n}\r\nClock.prototype.removeClass=function(to){\r\n  this.$jq.removeClass(to);\r\n}","var componentBase=require('./componentBase');\r\nlet eemiter=require('onhandlers');\r\nvar syncman,mouse;\r\nexports.enable=function(globals){\r\n  syncman=globals.syncman;\r\n  mouse=globals.mouse;\r\n  componentBase=componentBase.get({syncman:syncman,mouse:mouse});\r\n  return Sequencer;\r\n}\r\n/**\r\n * A generator of sequencers\r\n *\r\n * @class Sequencer\r\n * @constructor new MsComponents.Sequencer(DOM/$jquery element,{properties})\r\n */\r\n //defines all the sequencer parameters by math,\r\n //maybe in a funture by styling table\r\nvar seqProg=4;\r\nfunction Sequencer(parent,options){\r\n var n=options.n||3;\r\n var thisSequencer=this;\r\n this.name=\"sequencer\"\r\n componentBase.call(this,parent,options);\r\n // this.$jq=$('<div class=\"sequencer\" id=\"seq_'+n+'\"><p style=\"position:absolute\"></p></div>');\r\n parent.append(this.$jq);\r\n this.alive=false;\r\n this._bindN=syncman.bindList.push(this)-1;\r\n this.pos=0;\r\n this.data=[];\r\n /**\r\n  * @param len\r\n  *how many steps the sequencer has\r\n  * @alias length\r\n  */\r\n this.len=options.len|options.length|Math.pow(2,(seqProg%5)+1);\r\n /**\r\n  * @param evry\r\n  * how many clock steps make a sequencer step\r\n  * @alias stepDivision\r\n  */\r\n this.evry=options.evry|options.stepDivision|Math.pow(2,(seqProg%4)+1);\r\n //must count an [every] amount of beats for each pos increment.\r\n this.subpos=0;\r\n this.$jq.css({width:16*Math.ceil(this.len/4)+\"px\"});\r\n //this.$jq.addClass(\"color_\"+seqProg%channels.length);\r\n this.disp=0;\r\n this.id=n;\r\n this.beatDisplace=0;\r\n var me=this;\r\n seqProg++;\r\n //this.channel=channels[this.id%channels.length];\r\n for(var bn=0; bn<this.len; bn++){\r\n   this.data[bn]=new SequencerButton(bn,this)\r\n }\r\n this.aliveChild=0;\r\n this.displace=0;\r\n this.setDisplace=function(to/*,emit*/){\r\n  //  if(emit==\"only\"){\r\n    //  emit=true;\r\n  //  }else{\r\n     this.subpos=((this.clock.currentStep)%(this.len*this.evry))+to;\r\n  //  }\r\n  //  if(emit==true){\r\n  //    sockChange(\"seq:\"+me._bindN+\"\",\"dspl\",to);\r\n  //  }\r\n }\r\n this.step=function(){\r\n   var prevalive=this.alive;\r\n   this.alive=this.aliveChild>0;\r\n  //  console.log(this.aliveChild);\r\n   if(this.alive){\r\n    //  console.log(\"sete\");\r\n     //if the state of this.alive changes, we must emit the displacement, because it is new\r\n     if(!prevalive){\r\n       this.displace=(this.clock.currentStep+this.subpos)%(this.len*this.evry);\r\n       //console.log(\"ok. emit displae: \"+this.displace);\r\n       //this.setDisplace(this.displace,\"only\");\r\n     };\r\n     //each sequencer has a different speed rates. while some plays one step per click, others will have one step per several clock ticks.\r\n     //the sequencer starting point is also displaced, and it depends on the time when it got alived+its position at that moment.\r\n     if(this.subpos%this.evry==0){\r\n       // console.log(\"sq\"+this.pos);\r\n       // data={sequencer:this.id,pos:this.pos,stepVal:this.data[this.pos].eval()};\r\n       // this.onStepTrigger(data);\r\n       // stepFunction(data);\r\n       this.pos=(this.subpos/this.evry)%(this.len);\r\n       var vl=this.data[this.pos].eval();\r\n       if(vl){\r\n         // this.channel.engine.start(0,this.channel.startOffset,this.channel.endTime);\r\n         //so, this is called elsewhere aswelll.... the channel should have a trigger function\r\n        //  var loopStart=this.channel.startOffset;\r\n        //  var loopEnd=this.channel.endTime;\r\n        //  this.channel.sampler.triggerAttack(false,0,1,{start:loopStart,end:loopEnd});\r\n        this.handle(\"trigger\",vl);\r\n       }\r\n     }else{\r\n     }\r\n     //what is more economic??\r\n     // this.subpos=(this.subpos+1)%(this.len*this.evry);\r\n     //i guess that.. but it can grow eternally\r\n     this.subpos++;\r\n   }\r\n }\r\n this.setClock=function(clock,divisions){\r\n   if(divisions)\r\n   this.evry=divisions;\r\n   if(clock.on){\r\n     clock.on('tick',function(){thisSequencer.step()});\r\n     if(clock.name!=\"clock\")\r\n     console.warn(\"you set the clock of a sequencer to somehting that is not a clock, but a \"+clock.name);\r\n   }else{\r\n     console.warn(\"you tried to connect a \"+this.name+\" to an object that has no event hanlers \");\r\n   }\r\n   this.clock=clock;\r\n }\r\n this.die=function(){\r\n   for(var bn in this.data){\r\n     this.data[bn].setData(0);\r\n   }\r\n   this.alive=false;\r\n   this.$jq.detach();\r\n }\r\n // this.onStepTrigger=function(data){\r\n //   // console.log(data);\r\n // }\r\n // this.$jq.on(\"mouseenter\",function(){\r\n //   focusChannel(me.channel.id);\r\n // });\r\n return this;\r\n}\r\n\r\nfunction SequencerButton(n,parent){\r\n  eemiter.call(this);\r\n  this.on(\"test\",function(){console.log(\"works!\")});\r\n  this.handle(\"test\");\r\n  this.$jq=$('<div class=\"seqbutton\"></div>');\r\n  this._bindN=syncman.bindList.push(this)-1;\r\n  parent.$jq.append(this.$jq);\r\n  this.data=0;\r\n  //pendant: evaluate wether the var n is still useful. remove it at every end.\r\n  this.n=n;\r\n  var me=this;\r\n  this.setData=function(to,emit){\r\n    // if(emit==true){\r\n    //   sockChange(\"seqb:\"+me._bindN+\"\",\"sV\",to);\r\n    // }\r\n    // console.log(\"sdata\");\r\n    //socket may set data to 0 when is already 0, generating displace of parent's alivedhild\r\n    if(to!=this.data){\r\n      if(to==1){\r\n        this.data=1;\r\n        this.$jq.addClass(\"on\");\r\n        parent.aliveChild++;\r\n      }\r\n      if(to==0){\r\n        this.data=0;\r\n        this.$jq.removeClass(\"on\");\r\n        parent.aliveChild--;\r\n      }\r\n    }\r\n    // console.log(parent.aliveChild);\r\n    // console.log(parent.aliveChild);\r\n  }\r\n  this.$jq.on(\"mousedown tap touchstart\",function(event){\r\n    event.preventDefault();\r\n    me.setData(Math.abs(me.data-1),true);\r\n    // me.data=;\r\n    if(me.data==1){\r\n       mouse.switching=true;\r\n    }else{\r\n    //   $(this).removeClass(\"on\");\r\n    //   parent.aliveChild--;\r\n       mouse.switching=false;\r\n     }\r\n  });\r\n  this.$jq.on(\"mouseenter touchenter\",function(){\r\n    if(mouse.buttonDown){\r\n      if(mouse.switching){\r\n        if(me.data==0){\r\n          me.setData(1,true);\r\n        }\r\n      }else{\r\n        if(me.data==1){\r\n          me.setData(0,true);\r\n        }\r\n      }\r\n    }\r\n  });\r\n  this.eval=function(){\r\n    var $jq=this.$jq;\r\n    $jq.addClass(\"turn\");\r\n    window.setTimeout(function(){\r\n      $jq.removeClass(\"turn\");\r\n    },200);\r\n    return this.data;\r\n  }\r\n}\r\n","/*\r\nThis script create DOM sliders that can be used in web browser to control stuff. They can be synced through sockets and others by using callbacks.\r\n    Copyright (C) 2016 Joaquín Aldunate\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nvar syncman,mouse;\r\n// var $;\r\nexports.enable=function(globals){\r\n  syncman=globals.syncman;\r\n  mouse=globals.mouse;\r\n  return Slider;\r\n};\r\n\r\n/**\r\n* Slider produces a vertical or horizontal slider that allows to control a value from dragging with the mouse.\r\n\r\n*\r\n* @class Slider\r\n* @constructor\r\n* @param {jquery} parent or DOM element to which this slider will be attached.\r\n* defaults to `$(\"body\")`\r\n* @default\r\n* @param {object} options object containing options\r\n* @param {String} options.css additional css properties for the slider\r\n* @param {function} options.valueFunction\r\n* defines the operation to apply to the internal value upon evaluation. the default is just linear\r\n* @example mySlider new MsComponents.Slider($(\"body\"),{vertical:false,value:0.73});\r\n*/\r\nfunction Slider(parent,options){\r\n  //my reference number for data binding. With this number the socket binder knows who is the reciever of the data, and also with what name to send it\r\n  //pendant: this can potentially create a problem, because two objects can be created simultaneously at different ends at the same time.\r\n  //maybe instead of the simple push, there could be a callback, adn the object waits to receive it's socket id once its creation was propagated throughout all the network, or maybe there is an array for senting and other different for receiving... first option seems more sensible\r\n  this.data={value:0};\r\n  this.valueFunction=function(val){\r\n    return val;\r\n  }\r\n  this._bindN=syncman.bindList.push(this)-1;\r\n  this.$jq=$('<div class=\"slider-container\" style=\"position:relative\"></div>');\r\n  this.$faderjq=$('<div class=\"slider-inner\" style=\"pointer-events:none; position:absolute\"></div>');\r\n  this.label=options.label||\"\";\r\n  this.labeljq=$('<p class=\"sliderlabel\"></p>');\r\n  this.$jq.append(this.$faderjq);\r\n  this.$jq.append(this.labeljq);\r\n  if(options.css)\r\n    this.$jq.css(options.css);\r\n  this.css=function(css){\r\n    this.$jq.css(css);\r\n    return this;\r\n  }\r\n  this.onChangeCallback=function(){};\r\n  //pendant: this should be part of a base prototype, not repeated in each type\r\n  if(typeof (parent.append||false)==\"function\"){\r\n    parent.append(this.$jq);\r\n  }else if(typeof (parent.$jq.append||false)==\"function\"){\r\n    parent.$jq.append(this.$jq);\r\n  }else{\r\n    console.log(\"a slider couldn't find dom element to attach himself\");\r\n  }\r\n  var me=this;\r\n  this.onChange=function(callback){\r\n    me.onChangeCallback=function(){callback(me.data)};\r\n    return this;\r\n  }\r\n  /**\r\n* Set the data to a value, and perform the graphic changes and data bindings that correspond to this change.\r\n* If you wanted to change the value, but not get this change reflected in the slider position, you would\r\n* assign the slider.data.value to your value.\r\n* @method setData\r\n* @param {number} to target value\r\n* @param {boolean} [emit=false] *not ready* wether to emit through syncman\r\n* @return {undefined} no return\r\n* @example mySlider.setData(0.53);\r\n*/\r\n  this.setData=function(to,emit){\r\n    if(emit===true){\r\n      //pendant: in sequencers we use parent.id, and here we use _bindN. Towards a controller API and a more sensical code, I think both should use the bind element array. read note in first line of this file.\r\n      //pendant: parent in seq is what me is here. this is pretty confusing var name decision\r\n      syncman.emit(\"slid:\"+me._bindN+\"\",\"sV\",to);\r\n    }\r\n    this.data.value=to;\r\n    this.onChangeCallback();\r\n    this.updateDom();\r\n  }\r\n  this.addClass=function(to){\r\n    this.$jq.addClass(to);\r\n  }\r\n  this.vertical=options.vertical||true;\r\n  this.addClass(\"vertical\");\r\n  this.$jq.on(\"mousedown tap touchstart\",function(event){\r\n    event.preventDefault();\r\n    if(me.vertical){\r\n      me.setData(1-event.offsetY/me.$jq.height(),true);//,true\r\n    }else{\r\n      me.setData(event.offsetX/me.$jq.width(),true);//,true\r\n    }\r\n  });\r\n\r\n  this.$jq.on(\"mousemove touchenter mouseleave mouseup\",function(event){\r\n    if(mouse.buttonDown){\r\n      event.preventDefault();\r\n      var emitThis=event.type==\"mouseleave\"||event.type==\"mouseup\"\r\n      if(me.vertical){\r\n        //the strange second paramenter in setdata was true, but it could clog the socket\r\n        me.setData(1-event.offsetY/me.$jq.height(),emitThis);//,true\r\n      }else{\r\n        me.setData(event.offsetX/me.$jq.width(),emitThis);//,true\r\n      }\r\n    }else{\r\n    }\r\n  });\r\n  this.eval=function(){\r\n    var jq=this.$jq;\r\n    jq.addClass(\"turn\");\r\n    window.setTimeout(function(){\r\n      jq.removeClass(\"turn\");\r\n    },200);\r\n    return valueFunction(this.data.value);\r\n  }\r\n  this.updateDom=function(){\r\n    if(this.vertical){\r\n      this.$faderjq.css({bottom:0,width:\"100%\",height:this.data.value*this.$jq.height()});\r\n    }else{\r\n      this.labeljq.html(this.label);\r\n      this.$faderjq.css({bottom:0,width:this.data.value*this.$jq.width(),height:\"100%\"});\r\n    }\r\n  }\r\n  this.setData(options.value);\r\n}","let eemiter=require('onhandlers');\r\nvar globals;\r\nvar mouse;\r\nexports.get=function(globals){\r\n  // syncman=globals.syncman;\r\n  mouse=globals.mouse;\r\n  return componentBase;\r\n}\r\n/**\r\n * The base of components.\r\n * It contains the function that are shared among all MsComponents. Makes little sense to use this alone\r\n *\r\n * @class componentBase\r\n * @constructor new MsComponents.componentBase(DOM/Jquery element,{properties})\r\n *\r\n * @property parent\r\n * @type Jquery / Dom element / componentBase\r\n * @property options\r\n * @type object\r\n */\r\nfunction componentBase(parent,options){\r\n  eemiter.call(this);\r\n  this.options=options;\r\n  var thisComponent=this;\r\n  if(!this.name){\r\n    this.name=\"component\";\r\n  }\r\n  this.$jq=$('<div class=\"ms-'+this.name+'\"></div>');\r\n  if(options.css)\r\n    this.$jq.css(options.css);\r\n  this.css=function(css){\r\n    this.$jq.css(options.css);\r\n    return this;\r\n  }\r\n  if(typeof (parent.append||false)==\"function\"){\r\n    parent.append(this.$jq);\r\n  }else if(typeof (parent.$jq.append||false)==\"function\"){\r\n    parent.$jq.append(this.$jq);\r\n  }else{\r\n    console.log(\"a slider couldn't find dom element to attach himself\");\r\n  }\r\n  /**\r\n  * @property mouseActivationMode\r\n  * @type String\r\n  *  dragAll: the buttons will activate through all the trajectory of the mouse while pressed\r\n  * oneByOne: one click=one button press\r\n  * dragLast: the mouse can be tragged and will activae and hover only the last button that it entered\r\n  * hover: the buttins are activated upon hover regardless of whether is clicked or not\r\n  */\r\n  if(!options.mouseActivationMode){\r\n    options.mouseActivationMode=\"dragAll\";\r\n  }\r\n\r\n  function mouseActivate(event){\r\n    thisComponent.handle(\"onMouseStart\");\r\n    event.preventDefault();\r\n    thisComponent.addClass(\"active\");\r\n  }\r\n  function mouseDeactivate(event){\r\n    thisComponent.handle(\"onMouseEnd\");\r\n    event.preventDefault();\r\n    thisComponent.removeClass(\"active\");\r\n  }\r\n\r\n  //to avoid if chains that are a pain to change\r\n  function aIsInB(a,b){\r\n    for (var c in b){\r\n      if(a==b[c]){console.log(\"true\");return true;}\r\n    }\r\n    return false;\r\n  };\r\n\r\n  this.$jq.on(\"mousedown tap touchstart\",function(event){\r\n    //check that upon the current event, a mouseActivate should be triggered.\r\n    if(aIsInB(options.mouseActivationMode,[\"dragAll\",\"oneByOne\",\"dragLast\"])){\r\n      mouseActivate(event);\r\n    }\r\n  });\r\n\r\n  this.$jq.on(\"mouseenter\",function(event){\r\n    if(mouse.buttonDown){\r\n      if(aIsInB(options.mouseActivationMode,[\"dragAll\",\"dragLast\"])){\r\n        mouseActivate(event);\r\n      }\r\n    }\r\n    if(options.mouseActivationMode==\"hover\"){\r\n      mouseActivate(event);\r\n    }\r\n  });\r\n  this.$jq.on(\"mouseup\",function(event){\r\n    if(aIsInB(options.mouseActivationMode,[\"dragAll\",\"oneByOne\",\"dragLast\"])){\r\n      mouseDeactivate(event);\r\n    }\r\n  });\r\n  this.$jq.on(\"mouseout\",function(event){\r\n    if(aIsInB(options.mouseActivationMode,[\"hover\",\"oneByOne\",\"dragLast\"])){\r\n      mouseDeactivate(event);\r\n    }\r\n  });\r\n\r\n\r\n  this.updateDom=function(){\r\n    thisComponent.$jq.html(this.label);\r\n  }\r\n  //aliasing of these two handy function\r\n  this.addClass=function(to){\r\n    thisComponent.$jq.addClass(to);\r\n  }\r\n  this.removeClass=function(to){\r\n    thisComponent.$jq.removeClass(to);\r\n  }\r\n}","var audioContext=new AudioContext();\r\nvar globals={};\r\nglobals.syncman=require('./syncman.js').enable();\r\nglobals.mouse=require('./mouse.js').enable();\r\nglobals.audioContext=audioContext;\r\n\r\nvar Slider=require('./Slider.js').enable(globals);\r\nvar Sequencer=require('./Sequencer.js').enable(globals);\r\nvar Button=require('./Button.js').enable(globals);\r\nvar Clock=require('./Clock.js').enable(globals);\r\n\r\nvar MsComponents={\r\n  Slider:Slider,\r\n  Sequencer:Sequencer,\r\n  Button:Button,\r\n  Clock:Clock,\r\n  create:function(what,options,where){\r\n    if(!where)\r\n      where=$(\"body\");\r\n    return new this[what](where,options);\r\n  },\r\n};\r\nwindow.MsComponents=MsComponents;\r\nconsole.log(MsComponents);","exports.enable=function(){\r\n\r\n  $(document).ready(function(){\r\n    $(document).on(\"mousedown touchstart touchmove\",function(event){\r\n      mouse.buttonDown=true;\r\n      // console.log(event);\r\n    });\r\n    $(document).on(\"mouseup touchend\",function(event){\r\n      mouse.buttonDown=false;\r\n    });\r\n    // document.ontouchmove = function(event){\r\n    //   event.preventDefault();\r\n    // }\r\n  });\r\n  \r\n  return mouse;\r\n}\r\nvar mouse={\r\n  tool:\"draw\"\r\n};\r\n\r\n\r\n","/*\r\nThis script contains a template for data-binding management if you want to do so. Otherwise, it will just placehold var names so there are no undefined vars.\r\n    Copyright (C) 2016 Joaquín Aldunate\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nexports.enable=function(){\r\n  return new Syncman();\r\n};\r\n\r\nfunction Syncman(){\r\n  //list of all the items that use data binding\r\n  this.bindList=[];\r\n  //how are you emitting changes? it depends on the server you use.\r\n  this.emit=function(){}\r\n}\r\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}